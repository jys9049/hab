version: "3.9" # docker-compose 파일이 사용할 문법 버전을 지정

services:
  web: # 서비스 명
    build: # 이 서비스를 실행할 이미지를 어떻게 빌드할지 정의
      context: . # Docker 이미지를 빌드할 때 필요한 파일들이 있는 위치를 지정합니다.
      dockerfile: Dockerfile # 빌드 컨텍스트 디렉토리 내에서 사용할 Dockerfile의 이름을 지정
    container_name: hab # 이 서비스로 생성될 컨테이너의 고정된 이름을 hab로 지정
    env_file: # 컨테이너 내부에서 사용할 환경 변수들을 파일로부터 가져오도록 설정
      - app.env # app.env 라는 파일에 정의된 모든 변수들을 이 컨테이너의 환경 변수로 로드 (Github Action에서 동적으로 생성)
    environment: # env_file 외에 추가적으로 환경 변수를 설정
      - NODE_ENV=production
    expose: # 컨테이너의 3000번 포트를 다른 컨테이너가(같은 네트워크 내의) 접근할 수 있도록 개방 [하지만 외부 (호스트 머신)에서는 직접 접근 불가능]
      - "3000"
    volumes: # 호스트 머신이나 다른 볼륨 컨테이너 내부의 디렉토리를 연결
      - next-static:/app/.next/static # next-static 이라는 이름의 볼륨을 컨테이너 내부의 /app/.next/static 디렉토리와 연결 (Next.js가 빌드 시 생성하는 정적 파일들을 이 볼륨에 저장하여 nginx 서비스와 공유하는 역할)
    restart: unless-stopped # 사용자가 직접 컨테이너를 중지시키지 않는 한, 어떤 이유로든 컨테이너가 종료되면 Docker가 자동으로 재시작 시킴
    networks:
      - app-network # 이 컨테이너가 연결될 Docker 네트워크를 지정

  nginx: # 서비스명 (리버스 프록시)
    image: nginx:1.25-alpine #Docker Hub에 있는 공식 nginx 이미지 사용
    container_name: nginx-proxy # 컨테이너 이름을 nginx-proxy로 고정
    ports: # 호스트 머신의 포트와 컨테이너의 포트를 연결하여 외부에서 접근할 수 있게 함
      - "80:80" # 호스트의 80번 포트로 들어오는 요청을 nginx 컨테이너의 80번 포트로 전달
      - "443:443" # 위와 마찬가지
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # 호스트의 nginx.conf 파일을 컨테이너의 Nginx 설정 파일 위치에 덮어씌움 (:ro 는 컨테이너 안에서 이 파일을 수정할 수 없도록 읽기 전용으로 마운트 하라는 의미)
      - /etc/letsencrypt/live/hab.jeongyongseong.kr/fullchain.pem:/etc/letsencrypt/live/hab.jeongyongseong.kr/fullchain.pem:ro ## 호스트 머신에 저장된 SSL 인증서 파일들을 해당 경로에 연결하여 HTTPS를 활성화 (마찬가지로 읽기전용)
      - /etc/letsencrypt/live/hab.jeongyongseong.kr/privkey.pem:/etc/letsencrypt/live/hab.jeongyongseong.kr/privkey.pem:ro ## 호스트 머신에 저장된 SSL 인증서 파일들을 해당 경로에 연결하여 HTTPS를 활성화 (마찬가지로 읽기전용)
      - next-static:/app/.next/static:ro # web 서비스와 공유하는 Next-static 볼륨을 마운트함 (Nginx가 Next.js를 저치지 않고 정적 파일을 직접 사용자에게 더 빠르게 제공 함)
    depends_on: # 서비스 간의 실행 순서를 제어함. nginx는 web 서비스가 시작된 이후에 시작됨.
      - web
    restart: unless-stopped # web 서비스 restart 설명과 동일
    networks: # web 서비스 restart 설명과 동일
      - app-network

volumes: # docker-compose 파일에서 사용할 볼륨을 정의
  next-static: # next-static 이라는 이름의 Docker 볼륨을 생성함. 이 볼륨은 web 서비스와 nginx 서비스가 데이터를 공유하는 데 사용

networks: # docker-compose 파일에서 사용할 네트워크를 정의
  app-network: # app-network 라는 이름의 사용자 정의 네트워크를 생성
    driver: bridge # 이 네트워크의 종류를 bridge로 정의 같은 bridge 네트워크에 속한 컨테이너들은 서로 컨테이너 이름으로 통신 가능
